## Here we used optimized Solution for our problem 

class Solution{
    public:
    pair<bool,int> isBalancedFirst(Node* root){
        if(root == NULL){
            pair<bool,int> p = make_pair(true,0);
            return p;
        }
        
        pair<bool,int> left = isBalancedFirst(root -> left);
        pair<bool,int> right = isBalancedFirst(root -> right);
        
        bool leftAns = left.first;
        bool rightAns = right.first;
        
        bool diff = abs(left.second - right.second) <= 1;                    ## Main Formula for finding the tree is balanced or not 
        
        pair<bool,int> ans;
        ans.second = max(left.second, right.second) + 1;                     ## Formula for finding the height of tree 
        
        if(leftAns && rightAns && diff){
            ans.first = true;
        }
        else{
            ans.first = false;
        }
        return ans;
    }
    //Function to check whether a binary tree is balanced or not.
    bool isBalanced(Node *root)
    {
        return isBalancedFirst(root).first;
    }
};
