
## Here the problem is solved using optimzed approach 

class Solution
{
public:

    void solve(Node* root, int sum, int &maxSum, int len, int &maxLen){
        
        // Base Case 
        
        if(root == NULL){
            
            if(len > maxLen){                            ## Checking if Len is less than MaxLen
                maxLen = len;                            ## Updating Current values of len and sum into maxLen and maxSum
                maxSum = sum;
            }
            else if(len == maxLen){
                maxSum = max(sum, maxSum);               ## Here we are taking if its greatest value between the sum and maxSum 
            }
            return;
        }
        
        sum = sum + root -> data;
         
        solve(root -> left, sum, maxSum, len+1,maxLen);       ## Here we going for left 
        solve(root -> right, sum, maxSum, len+1,maxLen);      ## Here we are going for right call
    }
    
    int sumOfLongRootToLeafPath(Node *root)
    {
        //code here
        int len = 0;
        int maxLen = 0;
        
        int sum = 0;
        int maxSum = 0;
        
        solve(root,sum, maxSum, len, maxLen);
        return maxSum;
    }
};
