## Here is Optimized Solution for the Problem 

class Solution {
  public:
    vector <int> bottomView(Node *root) {
        // Your Code Here
        vector<int> ans;
        if(root == NULL){
            return ans;
        }
        
        map<int,int> topNode;
        queue<pair<Node*, int> > q;
        
        q.push(make_pair(root,0));
        while(!q.empty()){
            pair<Node*, int> temp = q.front();
            q.pop();
            
            Node* frontNode = temp.first;
            int hd = temp.second;
            
            topNode[hd] = frontNode -> data;                      ## Same is Top view of Binary tree but here we removed the one condition and we are direct putting the data
                
            if(frontNode -> left)
                q.push(make_pair(frontNode -> left, hd-1 ));
            if(frontNode -> right)
                q.push(make_pair(frontNode -> right, hd+1 ));
        }
        
        for(auto i:topNode)
        {
            ans.push_back(i.second);
        }
        return ans;
    }
};
